/*INSERT INTO lesson_plan_step (NUMBER, NAME) VALUES
 (1, 'Типи обчислювальних процесів'),
 (2, 'Подання числових даних у комп’ютері'),
 (3, 'Програмування виразів'),
 (4, 'Реалізація лінійного алгоритму та алгоритму з розгалуженням');
 SELECT * FROM lesson_plan_step; 

 INSERT INTO lesson_plan (step1_id, step2_id, step3_id, step4_id) VALUES
 (5, 6, 7, 8);*/
 select * from lesson_plan;
/*INSERT INTO theory_step (theory_text, theory_image, plan_id, plan_step_id)
 VALUES('Відповідно до методології програмування, яку називають структурним програмуванням, будь-яку програму можна створити за допомогою комбінації трьох базових алгоритмічних структур: лінійної, розгалуження і циклу. Кожна структура має один вхід і один вихід. 
Цілі структурного програмування: позбутися поганої структури програми, створити програми, які можна розуміти, супроводжувати і модифікувати без участі автора.
Лінійна структура передбачає, що дії мають виконуватися одна за одною по одному разу в порядку їхнього запису в алгоритмі чи тексті програми. Наприклад: дістати книгу, потім розгорнути книгу, потім закрити книгу.
Структура розгалуження («якщо-то-інакше») забезпечує вибір між двома альтернативами залежно від значення наперед заданої умови — вибирається один із шляхів, кожен з яких передбачає виконання певної операції або кількох операцій. Наприклад: взяти портфель, якщо надворі йде дощ – взяти парасолю, інакше – взяти сонцезахисні окуляри, відчинити двері. 
Циклічна структура (структура повторення) передбачає багаторазове виконання дій при виконанні деякої умови. У циклічній структурі умова може перевірятися перед або після виконання дій. Якщо умова набуває істинного значення, то виконуються певні дії, після чого знову перевіряється умова. Як тільки умова набуває хибного значення, робота циклу закінчується. 
Оператори в циклі (їх може бути досить багато) повинні змінювати умову, бо інакше програма буде працювати до нескінченності — зациклиться.
', 
 '', 3, 5),
 ('Цілі числа і дробові в комп’ютері кодуються по-різному, але як і вся інформація в сучасних комп’ютерах, вони подаються у двійковому вигляді - використовується двійкова система числення.
У комп’ютерах для зберігання значень констант і змінних різних типів відводиться різна за довжиною, але фіксована для даного типу, ділянка пам’яті.
Наприклад, у більшості реалізацій мови програмування С для даних типу char і типу unsigned char виділяється 1 байт пам’яті (8 бітів або ще кажуть: 8 розрядів), для даних типу int і float — 4 байти (32 біти), long long int і double — 8 байтів (64 біти).
А у мові Turbo Pascal для даних типу byte і shortint виділяється 1 байт (8 бітів) пам’яті, integer і word — 2 байти (16 бітів) , longint — 4 байти (32 біти), comp — 8 байтів (64 біти), real — 6 байтів (24 біти).
', 
 '', 3, 6),
 ('Вираз у широкому розумінні — це константа, або змінна, або звернення до функції, або вираз, який містить константи, змінні, звернення до функцій, з’єднані знаками операцій. 
Арифметичний вираз — це константа, або змінна, або звернення до функції, або вираз, який містить константи, змінні, звернення до функцій і операції. В арифметичних виразах використовують такі операції:
++ (інкремент — збільшення), -- (декремент — зменшення);
– (унарний мінус);
* (множення), / (ділення), % (ділення за модулем — остача від ділення);
+ (додавання), – (віднімання).
Якщо операцію ділення / застосувати до цілих чисел чи символів, то дробова частина відкидається (7/4 дає 1; але 7./4, або 7/4., або 7./4. дає 1,75). Операція ділення за модулем повертає остачу від цілочисельного ділення (7%4 дає 3); цю операцію не можна застосовувати до чисел з плаваючою точкою.
Операції з однаковим пріоритетом виконуються зліва направо. Використовуючи круглі дужки (це теж операція, причому з найвищим пріоритетом), можна змінити порядок обчислень. У мові С круглі дужки інтерпретуються компілятором так само, як і в будь-якій іншій мові програмування: вони надають операції (або послідовності операцій) найвищий пріоритет.
Логічні вирази. Логічний вираз — це вираз, результатом обчислення якого є логічне значення «істина» або «хибність». Значення «істина» або «хибність» є результатом операцій порівняння або логічних операцій. У мові С значення «істина» подається числом 1, значення «хибність» — 0. Але, якщо замість логічного виразу умовою є число (включаючи додатні й від’ємні, цілі й дійсні), відмінне від нуля, то воно інтерпретується як «істина», і тільки число 0 інтерпретується як «хибність».
Треба мати на увазі, що в загальному випадку до дійсних чисел не можна застосовувати операцію порівняння дорівнює = =, оскільки дійсні числа в пам’яті комп’ютера подаються неточно. Для дійсних чисел порівняння виду x==y, як правило, замінюють на порівняння fabs(x-y)<=eps, де eps — невелике число, яке вказує на допустиму похибку.
', 
 '', 3, 7),
 ('Лінійний алгоритм містить тільки послідовності операторів присвоювання і звернення до різноманітних функцій, які, як правило, стосуються введення і виведення інформації. Перетворення інформації відбувається послідовно за певними формулами в тому порядку, в якому вони записані в алгоритмі. За таким алгоритмом виконується вся вказана в ньому послідовність дій без пропусків або повторень.
Оператор присвоювання мови С в найпростішій формі має вигляд:
ім’я_змінної = вираз; .
Виразом тут може бути константа, змінна, звернення до функції і вираз, який містить, константи, змінні, звернення до функцій, з’єднані знаками операцій. 
Наприклад: y=3+x-sin(2*x*x+1); .
Виклик функцій. До функцій можна звертатися не тільки у виразах, а й окремим оператором. Оператор виклику функції має вигляд (зверніть увагу, навіть, якщо функція не має параметрів, круглі дужки все одно треба записувати):
ім’я_функції(); або ім’я_функції(параметри);
Наприклад, scanf("%f%f", &a, &x); , printf("y=%0.3f z=%0.3f t=%0.3f", y,z, t); , printf("%f\n", sin((double)n)); , abc(); .
Порожній оператор не виконує ніяких дій. Він вставляється в тих місцях програми, де необхідне використання оператора, але не потрібна за логікою алгоритму ніяка дія. Записується як ; або {} .
Блок операторів (складний оператор) — це послідовність операторів, взятих у фігурні дужки. У блоці після відкриваючої фігурної дужки можна оголошувати змінні, але вони використовуються лише в даному блоці, а поза блоком вони недоступні.
Для програмування розгалужень у мовах програмування реалізовано умовні оператори (оператори розгалуження) if і оператори множинного вибору (багатоваріантного розгалуження), зокрема, у мові С оператор switch, у мові Pascal — case. Ці оператори є операторами керування. Оператори керування визначають, в якій послідовності виконується програма. Якби їх не було, оператори програми завжди виконувалися б послідовно, в тому порядку, в якому вони записані.
Умовний оператор мови С має вигляд:
if (умова)
оператор1;
else
оператор2;
структуризацію запису оператора можна подати й
по-іншому, якщо оператори короткі:
if (умова) оператор1;
else оператор2;
якщо оператори дуже короткі, то можна в один рядок записати весь оператор if:
if (умова) оператор1; else оператор2; .
Гілка else в операторі не обов’язкова. Такий вигляд умовного оператора називають неповною формою:
if (умова) оператор;
',
 '', 3, 8);
select * from theory_step;

 INSERT INTO theory (step1_id, step2_id, step3_id, step4_id) VALUES (13, 14, 15, 16);
select * from theory;

 INSERT INTO answers (answer)
 VALUES ('Лінійна'),
        ('Розгалуження'),
        ('Циклічна'),
        ('Всі перераховані вище'),
        ('1 байт'),
        ('2 байти'),
        ('4 байти'),
        ('8 байтів'),
        ('/'),
        ('%'),
        ('*'),
        ('-'),
        ('while'),
        ('if'),
        ('return'),
        ('for');
select * from answers;

 INSERT INTO answer_variants (correct_answer_id, first_answer_id, second_answer_id, third_answer_id, fourth_answer_id)
 VALUES (21, 18, 19, 20, 21),
        (24, 22, 23, 24, 25),
        (27, 26, 27, 28, 29),
        (31, 30, 31, 32, 33);
select * from answer_variants;

INSERT INTO game_task (questionNumber, question, answers,  task_answers_type) VALUES
 (1, 
 'Яка з наступних структур програмування є базовою для створення будь-якої програми за методологією структурного програмування?', 
 5,  1),
 (2,
  'Скільки байтів пам\'яті відводиться для типу float у більшості реалізацій мови програмування С?', 6,  2),
 (3,
  'Яка операція повертає залишок від ділення?', 7,  2),
(4,
  'Який з операторів є умовним оператором для виконання розгалуження?',
 8,  1);
 select * from game_task;

INSERT INTO game (name, time_limit) VALUES ('Перевірка знань: Різноманітність алгоритмів', 360);
SELECT * FROM game;

INSERT INTO game_task_to_game (game_id, game_task_id) VALUES
(2, 9),
(2, 10),
(2, 11),
(2, 12);
SELECT * FROM game_task_to_game;*/
/*
insert into learning_category (name) values ('ALGORITHMS'), ('DATA_STRUCTURES');
insert into topic  (topic_name, learning_category_id) values ('Базові відомості про алгоритми', 1);
*/
INSERT INTO lesson (game_id, topic_id, theory_id, lesson_plan_id, title) VALUES
(2, 1, 2, 3, 'Урок 1: Різноманітність алгоритмів');