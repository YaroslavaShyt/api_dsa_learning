


/*insert into topic  (topic_name, learning_category_id) values ('Поняття структури даних', 2);
select * from topic;

INSERT INTO lesson_plan_step (NUMBER, NAME) VALUES
 (1, 'Способи організації даних в комп\'ютерах'),
 (2, 'Поняття та класифікація структур даних – Крок 1'),
 (3, 'Поняття та класифікація структур даних – Крок 2'),
 (4, 'Поняття та класифікація структур даних – Крок 3');
 SELECT * FROM lesson_plan_step; 

 INSERT INTO lesson_plan (step1_id, step2_id, step3_id, step4_id) VALUES
 (9, 10, 11, 12);
 select * from lesson_plan;
INSERT INTO theory_step (theory_text, theory_image, plan_id, plan_step_id)
 VALUES('Необхідною умовою зберігання інформації в пам\'яті комп\'ютера є можливість перетворення цієї самої інформації в підходящу для комп\'ютера форму. У тому випадку, якщо ця умова виконується, слід визначити структуру, придатну саме для наявної інформації, ту, яка надасть необхідний набір можливостей роботи з нею.
Тут під структурою розуміється спосіб представлення інформації, за допомогою якого сукупність окремо взятих елементів утворює щось єдине, обумовлене їх взаємозв\'язком між собою. Скомпоновані по будь-яким правилам і логічно пов\'язані між собою дані можуть дуже ефективно оброблятися, так як загальна для них структура надає набір можливостей управління ними - одне з того за рахунок чого досягаються високі результати у вирішенні тих чи інших завдань.
У програмуванні структури даних визначають способи організації даних у комп\'ютерах. Наприклад, у мові програмування C++ структура представляє колекцію змінних, об\'єднаних загальним іменем, яка забезпечує зручний засіб зберігання споріднених даних в одному місці.
', 
 '', 4, 9),
 ('Класифікація структур даних виконується за декількома ознаками
1) За способом представлення: фізична та логічна.
Поняття "фізична структура даних" має відношення до способу фізичного представлення даних у пам\'яті машини і називається ще структурою збереження, внутрішньою структурою або структурою пам\'яті.
Логічна чи абстрактна структура – це розгляд структури даних без врахування її представлення в машинній пам\'яті. У загальному випадку між логічною і відповідною їй фізичною структурами існує розходження, ступінь якого залежить від самої структури й особливостей того середовища, у якому вона повинна бути відображеною. Внаслідок цього розходження існують процедури, що здійснюють відображення логічної структури у фізичну, і, навпаки, фізичної структури в логічну. Ці процедури забезпечують, крім того, доступ до фізичних структур і виконання над ними різних операцій, причому кожна операція розглядається стосовно до логічної чи фізичної структури даних.
', 
 '', 4, 10),
 ('2) Прості (базові, примітивні) структури – це такі, які не можуть бути розподілені на складові частини. З погляду фізичної структури важливою є та обставина, що в даній машинній архітектурі, у даній системі програмування відомо, який буде розмір даного простого типу і яка структура його розміщення в пам\'яті. З логічної точки зору прості дані є неподільними одиницями.
Інтегровані (структуровані, композитні, складні) – такі структури даних, складовими частинами яких є інші структури даних – прості чи, у свою чергу, інтегровані. Інтегровані структури даних конструюються програмістом з використанням засобів інтеграції даних, наданих мовами програмування.
3) За наявністю зв\'язків між елементами даних: незв\'язні та зв\'язні. Незв\'язні структури характеризуються відсутністю зв\'язків між елементами структури, зв\'язні – наявністю такого зв\'язку. Прикладами незв\'язних структур є вектори, масиви, рядки, стеки, черги; приклади зв\'язних структур – зв\'язні списки.
4) За мінливістю: статичні, напівстатичні, динамічні.
Дуже важлива ознака структури даних - її мінливість, тобто зміна числа елементів і (чи) зв\'язків між елементами структури. У визначенні мінливості структури не відбитий факт зміни значень елементів даних, оскільки в цьому випадку всі структури даних мали б властивість мінливості.
Статичні – до цієї групи відносять масиви, множини, записи, таблиці.
Напівстатичні – це стеки, черги, деки, дерева.
Динамічні – лінійні та розгалужені зв\'язні списки, графи, дерева.
', 
 '', 4, 11),
 ('5) За характером упорядкованості елементів у структурі: лінійні та нелінійні. Лінійні структури в залежності від характеру взаємного розташування елементів у пам\'яті поділяють на структури з послідовним розподілом елементів у пам\'яті (вектори, рядки, масиви, стеки, черги) і структури з довільним зв\'язним розподілом елементів у пам\'яті (однозв\'язні і двозв’язні лінійні списки).
Нелінійні структури – багатозв’язні списки, дерева, графи.
6) За видом пам\'яті, використовуваної для збереження даних: структури даних для оперативної і для зовнішньої пам\'яті.
Структури даних для оперативної пам\'яті – це дані, розміщені в статичній і динамічній пам\'яті комп\'ютера. Всі вищенаведені структури даних – це структури для оперативної пам\'яті. Структури даних для зовнішньої пам\'яті називають файловими структурами чи файлами. Прикладами файлових структур є послідовні файли, файли, організовані розділами, В-дерева.
Отже, структури даних класифікують за: видом пам\'яті, використовуваної для збереження даних, характером упорядкованості елементів у структурі, мінливістю, наявністю зв\'язків між елементами даних, складністю, способом представлення.
',
 '', 4, 12);
select * from theory_step;

INSERT INTO theory (step1_id, step2_id, step3_id, step4_id) VALUES (17, 18, 19, 20);
select * from theory;

 INSERT INTO answers (answer)
 VALUES ('Наявність електричної енергії'),
        ('Можливість перетворення інформації в підходящу для комп\'ютера форму'),
        ('Використання апаратного забезпечення'),
        ('Використання тільки фізичних структур даних'),
        
        ('Спосіб організації даних без врахування їх представлення в пам\'яті'),
        ('Процедури відображення логічної структури в фізичну'),
        ('Спосіб фізичного представлення даних у пам\'яті комп\'ютера'),
        ('Структура даних, яка використовується тільки для зберігання значень'),
        
        ('Стек'),
        ('Масив'),
        ('Строка'),
        ('Структура'),
        
        ('Множина'),
        ('Масив'),
        ('Лінійний зв\'язаний список'),
        ('Черга');
select * from answers;

 INSERT INTO answer_variants (correct_answer_id, first_answer_id, second_answer_id, third_answer_id, fourth_answer_id)
 VALUES (36, 34, 35, 36, 37),
        (40, 38, 39, 40, 41),
        (45, 42, 43, 44, 45),
        (48, 46, 47, 48, 49);
select * from answer_variants;

INSERT INTO game_task (questionNumber, question, answers,  task_answers_type) VALUES
 (1, 
 'Що є необхідною умовою для зберігання інформації в пам\'яті комп\'ютера?', 
 8,  1),
 (2,
  'Що таке фізична структура даних?', 10,  1),
 (3,
  'Яка структура даних є складною (інтегрованою) і складається з інших структур даних?', 11,  2),
(4,
  'Яка з наведених структур є динамічною?',
 12,  2);
 select * from game_task;

INSERT INTO game (name, time_limit) VALUES ('Перевірка знань: Основні відомостіs', 560);
SELECT * FROM game;*/
/*
INSERT INTO game_task_to_game (game_id, game_task_id) VALUES
(3, 13),
(3, 14),
(3, 15),
(3, 16);
SELECT * FROM game_task_to_game;*/


INSERT INTO lesson (game_id, topic_id, theory_id, lesson_plan_id, title) VALUES
(3, 2, 3, 4, 'Урок 1: Основні відомості про структури даних');/**/